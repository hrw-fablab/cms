# Generated by Django 3.2.12 on 2022-04-14 16:43

import abstract.blocks.chooser
import abstract.blocks.spacer
from django.db import migrations
import wagtail.blocks
import wagtail.embeds.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtailmedia.blocks


class Migration(migrations.Migration):

    dependencies = [
        ('qufablab', '0002_alter_homepage_body'),
    ]

    operations = [
        migrations.AlterField(
            model_name='flexpage',
            name='body',
            field=wagtail.fields.StreamField([('heading', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(required=False))])), ('paragraph', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(required=False)), ('text', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'h3', 'ul', 'link', 'document-link', 'image', 'embed']))])), ('blockquote', wagtail.blocks.StructBlock([('text', wagtail.blocks.TextBlock(required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('cite', wagtail.blocks.CharBlock(required=False))])), ('split', wagtail.blocks.StructBlock([('title', wagtail.blocks.TextBlock(required=False)), ('text', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'ul', 'link'], required=False)), ('page', wagtail.blocks.PageChooserBlock(required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('accent', wagtail.blocks.BooleanBlock(required=False))])), ('grid', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(required=False)), ('layout', wagtail.blocks.ChoiceBlock(choices=[('extrem', '1 x N'), ('large', '2 x N'), ('medium', '3 x N'), ('small', '4 x N')], help_text='Die Anzahl an Elementen in einer Horizontalen Reihe')), ('cards', wagtail.blocks.StreamBlock([('card', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('text', wagtail.blocks.TextBlock(required=False)), ('page', wagtail.blocks.PageChooserBlock(required=False))])), ('person', wagtail.blocks.StructBlock([('person', abstract.blocks.chooser.PersonChooserBlock(required=False))]))]))])), ('grabber', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(required=False)), ('layout', wagtail.blocks.ChoiceBlock(choices=[('news-large', 'Zeitungslayout mit einem Hauptelement'), ('news-medium', 'Zeitungslayout mit zwei Hauptelementen'), ('extrem', '1 Element pro Reihe'), ('large', '2 Elemente pro Reihe'), ('medium', '3 Elemente pro Reihe'), ('small', '4 Elemente pro Reihe')], help_text='Die Anzahl an Elementen in einer Horizontalen Reihe')), ('amount', wagtail.blocks.IntegerBlock(default=5)), ('pages', wagtail.blocks.ListBlock(wagtail.blocks.PageChooserBlock()))])), ('spacer', abstract.blocks.spacer.SpacerBlock()), ('gallery', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(required=False)), ('contain', wagtail.blocks.BooleanBlock(help_text='Wenn z.B. von Logos das Seitenverhältnis beibehalten bleiben soll, sodass das Logo nicht abgeschnitten wird.', label='Cointain Aspect Ratio', required=False)), ('layout', wagtail.blocks.ChoiceBlock(choices=[('extrem', '1 x N'), ('large', '2 x N'), ('medium', '3 x N'), ('small', '4 x N'), ('tiny', '5 x N')], help_text='Die Anzahl an Elementen in einer Horizontalen Reihe')), ('cards', wagtail.blocks.StreamBlock([('image', wagtail.images.blocks.ImageChooserBlock()), ('video', wagtailmedia.blocks.VideoChooserBlock()), ('embed', wagtail.embeds.blocks.EmbedBlock())]))])), ('video', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(required=False)), ('video', wagtailmedia.blocks.VideoChooserBlock(icon='media', required=False))])), ('image', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(required=False))])), ('embed', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(required=False)), ('embed', wagtail.embeds.blocks.EmbedBlock(required=False))])), ('card', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('text', wagtail.blocks.TextBlock(required=False)), ('page', wagtail.blocks.PageChooserBlock(required=False))])), ('person', wagtail.blocks.StructBlock([('person', abstract.blocks.chooser.PersonChooserBlock(required=False))])), ('html', wagtail.blocks.StructBlock([('code', wagtail.blocks.RawHTMLBlock(required=False))])), ('banner', wagtail.blocks.StructBlock([('title', wagtail.blocks.TextBlock(required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('illustration', wagtail.blocks.BooleanBlock(required=False))]))], blank=True, use_json_field=True),
        ),
        migrations.AlterField(
            model_name='homepage',
            name='body',
            field=wagtail.fields.StreamField([('heading', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(required=False))])), ('paragraph', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(required=False)), ('text', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'h3', 'ul', 'link', 'document-link', 'image', 'embed']))])), ('hero', wagtail.blocks.StructBlock([('title', wagtail.blocks.TextBlock(required=False)), ('text', wagtail.blocks.TextBlock(max_length=255, required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('video', wagtailmedia.blocks.VideoChooserBlock(icon='media', required=False))])), ('split', wagtail.blocks.StructBlock([('title', wagtail.blocks.TextBlock(required=False)), ('text', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'ul', 'link'], required=False)), ('page', wagtail.blocks.PageChooserBlock(required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('accent', wagtail.blocks.BooleanBlock(required=False))])), ('grid', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(required=False)), ('layout', wagtail.blocks.ChoiceBlock(choices=[('extrem', '1 x N'), ('large', '2 x N'), ('medium', '3 x N'), ('small', '4 x N')], help_text='Die Anzahl an Elementen in einer Horizontalen Reihe')), ('cards', wagtail.blocks.StreamBlock([('card', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('text', wagtail.blocks.TextBlock(required=False)), ('page', wagtail.blocks.PageChooserBlock(required=False))])), ('person', wagtail.blocks.StructBlock([('person', abstract.blocks.chooser.PersonChooserBlock(required=False))]))]))])), ('grabber', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(required=False)), ('layout', wagtail.blocks.ChoiceBlock(choices=[('news-large', 'Zeitungslayout mit einem Hauptelement'), ('news-medium', 'Zeitungslayout mit zwei Hauptelementen'), ('extrem', '1 Element pro Reihe'), ('large', '2 Elemente pro Reihe'), ('medium', '3 Elemente pro Reihe'), ('small', '4 Elemente pro Reihe')], help_text='Die Anzahl an Elementen in einer Horizontalen Reihe')), ('amount', wagtail.blocks.IntegerBlock(default=5)), ('pages', wagtail.blocks.ListBlock(wagtail.blocks.PageChooserBlock()))])), ('gallery', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(required=False)), ('contain', wagtail.blocks.BooleanBlock(help_text='Wenn z.B. von Logos das Seitenverhältnis beibehalten bleiben soll, sodass das Logo nicht abgeschnitten wird.', label='Cointain Aspect Ratio', required=False)), ('layout', wagtail.blocks.ChoiceBlock(choices=[('extrem', '1 x N'), ('large', '2 x N'), ('medium', '3 x N'), ('small', '4 x N'), ('tiny', '5 x N')], help_text='Die Anzahl an Elementen in einer Horizontalen Reihe')), ('cards', wagtail.blocks.StreamBlock([('image', wagtail.images.blocks.ImageChooserBlock()), ('video', wagtailmedia.blocks.VideoChooserBlock()), ('embed', wagtail.embeds.blocks.EmbedBlock())]))])), ('blockquote', wagtail.blocks.StructBlock([('text', wagtail.blocks.TextBlock(required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('cite', wagtail.blocks.CharBlock(required=False))])), ('spacer', abstract.blocks.spacer.SpacerBlock()), ('video', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(required=False)), ('video', wagtailmedia.blocks.VideoChooserBlock(icon='media', required=False))])), ('image', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(required=False))])), ('embed', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(required=False)), ('embed', wagtail.embeds.blocks.EmbedBlock(required=False))])), ('card', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('text', wagtail.blocks.TextBlock(required=False)), ('page', wagtail.blocks.PageChooserBlock(required=False))])), ('person', wagtail.blocks.StructBlock([('person', abstract.blocks.chooser.PersonChooserBlock(required=False))])), ('html', wagtail.blocks.StructBlock([('code', wagtail.blocks.RawHTMLBlock(required=False))])), ('banner', wagtail.blocks.StructBlock([('title', wagtail.blocks.TextBlock(required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('illustration', wagtail.blocks.BooleanBlock(required=False))])), ('members', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(required=False)), ('layout', wagtail.blocks.ChoiceBlock(choices=[('extrem', '1 x N'), ('large', '2 x N'), ('medium', '3 x N'), ('small', '4 x N')], help_text='Die Anzahl an Elementen in einer Horizontalen Reihe')), ('members', abstract.blocks.chooser.ProjectChooserBlock(required=False))]))], blank=True, use_json_field=True),
        ),
    ]
